#+TITLE: Mageas Doom Emacs Config
#+AUTHOR: Mageas
#+DESCRIPTION: Mageas personal Doom Emacs config.
#+PROPERTY: header-args :tangle config.el


* THEME
Setting the theme to doom-one.  To try out new themes, I set a keybinding for counsel-load-theme with 'SPC h t'.

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-one)
#+END_SRC


* BOOKMARKS AND BUFFERS
Doom Emacs uses 'SPC b' for keybindings related to bookmarks and buffers.

** Bookmarks
Bookmarks are somewhat like registers in that they record positions you can jump to.  Unlike registers, they have long names, and they persist automatically from one Emacs session to the next. The prototypical use of bookmarks is to record where you were reading in various files.

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("b". "buffer")
       :desc "List bookmarks" "L" #'list-bookmarks
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save))
#+END_SRC

** Buffers
Regarding /buffers/, the text you are editing in Emacs resides in an object called a /buffer/. Each time you visit a file, a buffer is used to hold the fileâ€™s text. Each time you invoke Dired, a buffer is used to hold the directory listing.  /Ibuffer/ is a program that lists all of your Emacs /buffers/, allowing you to navigate between them and filter them.

| COMMAND         | DESCRIPTION          | KEYBINDING |
|-----------------+----------------------+------------|
| ibuffer         | Launch ibuffer       | SPC b i    |
| kill-buffer     | Kill current buffer  | SPC b k    |
| next-buffer     | Goto next buffer     | SPC b n    |
| previous-buffer | Goto previous buffer | SPC b p    |
| save-buffer     | Save current buffer  | SPC b s    |

** Global Auto Revert
A buffer can get out of sync with respect to its visited file on disk if that file is changed by another program. To keep it up to date, you can enable Auto Revert mode by typing M-x auto-revert-mode, or you can set it to be turned on globally with 'global-auto-revert-mode'.  I have also turned on Global Auto Revert on non-file buffers, which is especially useful for 'dired' buffers.

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
#+end_src

** Keybindings within ibuffer mode
| COMMAND                           | DESCRIPTION                            | KEYBINDING |
|-----------------------------------+----------------------------------------+------------|
| ibuffer-mark-forward              | Mark the buffer                        | m          |
| ibuffer-unmark-forward            | Unmark the buffer                      | u          |
| ibuffer-do-kill-on-deletion-marks | Kill the marked buffers                | x          |
| ibuffer-filter-by-content         | Ibuffer filter by content              | f c        |
| ibuffer-filter-by-directory       | Ibuffer filter by directory            | f d        |
| ibuffer-filter-by-filename        | Ibuffer filter by filename (full path) | f f        |
| ibuffer-filter-by-mode            | Ibuffer filter by mode                 | f m        |
| ibuffer-filter-by-name            | Ibuffer filter by name                 | f n        |
| ibuffer-filter-disable            | Disable ibuffer filter                 | f x        |
| ibuffer-do-kill-lines             | Hide marked buffers                    | g h        |
| ibuffer-update                    | Restore hidden buffers                 | g H        |

#+begin_src emacs-lisp
(evil-define-key 'normal ibuffer-mode-map
  (kbd "f c") 'ibuffer-filter-by-content
  (kbd "f d") 'ibuffer-filter-by-directory
  (kbd "f f") 'ibuffer-filter-by-filename
  (kbd "f m") 'ibuffer-filter-by-mode
  (kbd "f n") 'ibuffer-filter-by-name
  (kbd "f x") 'ibuffer-filter-disable
  (kbd "g h") 'ibuffer-do-kill-lines
  (kbd "g H") 'ibuffer-update)
#+end_src


* DIRED
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  Doom Emacs does not use 'SPC d' for any of its keybindings, so I've chosen the format of 'SPC d' plus 'key'.

** Keybindings To Open Dired

| COMMAND    | DESCRIPTION                          | KEYBINDING |
|------------+--------------------------------------+------------|
| dired      | /Open dired file manager/            | SPC d d    |
| dired-jump | /Jump to current directory in dired/ | SPC d j    |

** Keybindings Within Dired
*** Basic dired commands

| COMMAND                | DESCRIPTION                                   | KEYBINDING |
|------------------------+-----------------------------------------------+------------|
| dired-view-file        | /View file in dired/                          | SPC d v    |
| dired-up-directory     | /Go up in directory tree/                     | h          |
| dired-find-file        | /Go down in directory tree (or open if file)/ | l          |
| dired-next-line        | Move down to next line                        | j          |
| dired-previous-line    | Move up to previous line                      | k          |
| dired-mark             | Mark file at point                            | m          |
| dired-unmark           | Unmark file at point                          | u          |
| dired-do-copy          | Copy current file or marked files             | C          |
| dired-do-rename        | Rename current file or marked files           | R          |
| dired-hide-details     | Toggle detailed listings on/off               | (          |
| dired-git-info-mode    | Toggle git information on/off                 | )          |
| dired-create-directory | Create new empty directory                    | +          |
| dired-diff             | Compare file at point with another            | =          |
| dired-subtree-toggle   | Toggle viewing subtree at point               | TAB        |

*** Dired commands using regex

| COMMAND                 | DESCRIPTION                | KEYBINDING |
|-------------------------+----------------------------+------------|
| dired-mark-files-regexp | Mark files using regex     | % m        |
| dired-do-copy-regexp    | Copy files using regex     | % C        |
| dired-do-rename-regexp  | Rename files using regex   | % R        |
| dired-mark-files-regexp | Mark all files using regex | * %        |

*** File permissions and ownership

| COMMAND         | DESCRIPTION                      | KEYBINDING |
|-----------------+----------------------------------+------------|
| dired-do-chgrp  | Change the group of marked files | g G        |
| dired-do-chmod  | Change the mode of marked files  | M          |
| dired-do-chown  | Change the owner of marked files | O          |
| dired-do-rename | Rename file or all marked files  | R          |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file" "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-up-directory
  (kbd "% l") 'dired-downcase
  (kbd "% u") 'dired-upcase
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

** Keybindings Within Dired With Peep-Dired-Mode Enabled
If peep-dired is enabled, you will get image previews as you go up/down with 'j' and 'k'

| COMMAND              | DESCRIPTION                                | KEYBINDING |
|----------------------+--------------------------------------------+------------|
| peep-dired           | /Toggle previews within dired/             | SPC d p    |
| peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC

** Making deleted files go to trash can
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files/")
#+end_src


* FONTS
Settings related to fonts within Doom Emacs:
+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 15)
      doom-variable-pitch-font (font-spec :family "JetBrains Mono" :size 15)
      ;;doom-variable-pitch-font (font-spec :family "Ubuntu" :size 15)
      doom-big-font (font-spec :family "JetBrains Mono" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC



* LINE SETTINGS
I set comment-line to 'SPC TAB TAB' which is a rather comfortable keybinding for me on my ZSA Moonlander keyboard.  The standard Emacs keybinding for comment-line is 'C-x C-;'.  The other keybindings are for commands that toggle on/off various line-related settings.  Doom Emacs uses 'SPC t' for "toggle" commands, so I choose 'SPC t' plus 'key' for those bindings.

| COMMAND                  | DESCRIPTION                                 | KEYBINDING  |
|--------------------------+---------------------------------------------+-------------|
| comment-line             | /Comment or uncomment lines/                | SPC TAB TAB |
| hl-line-mode             | /Toggle line highlighting in current frame/ | SPC t h     |
| global-hl-line-mode      | /Toggle line highlighting globally/         | SPC t H     |
| doom/toggle-line-numbers | /Toggle line numbers/                       | SPC t l     |
| toggle-truncate-lines    | /Toggle truncate lines/                     | SPC t t     |

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
(map! :leader
      :desc "Comment or uncomment lines" "TAB TAB" #'comment-line
      (:prefix ("t" . "toggle")
       :desc "Toggle line numbers" "l" #'doom/toggle-line-numbers
       :desc "Toggle line highlight in frame" "h" #'hl-line-mode
       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode
       :desc "Toggle truncate lines" "t" #'toggle-truncate-lines))
#+END_SRC



* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

** Configuring Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :init      ;; tweak dashboard config before loading it
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "\nKEYBINDINGS:\
\nFind file               (SPC .)     \
Open buffer list    (SPC b i)\
\nFind recent files       (SPC f r)   \
Open the eshell     (SPC e s)\
\nOpen dired file manager (SPC d d)   \
List of keybindings (SPC h b b)")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "~/.config/doom/doom-emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 5)
                          (projects . 5)
                          (registers . 5)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book"))))
#+end_src

** Dashboard in Emacsclient
This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.

#+begin_src emacs-lisp
(setq doom-fallback-buffer-name "*dashboard*")
#+end_src


* MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  For more information on what is available to configure in the Doom modeline, check out: https://github.com/seagle0128/doom-modeline

#+begin_src emacs-lisp
(set-face-attribute 'mode-line nil :font "Ubuntu Mono-13")
(setq doom-modeline-height 30     ;; sets modeline height
      doom-modeline-bar-width 5   ;; sets right bar width
      doom-modeline-persp-name t  ;; adds perspective name to modeline
      doom-modeline-persp-icon t) ;; adds folder icon next to persp name
#+end_src


* TREEMACS
The standard Emacs keybinding for comment-line is 'SPC o p'.

#+BEGIN_SRC emacs-lisp
(after! treemacs
    (setq treemacs-follow-after-init t))
#+END_SRC


* SPLITS
I set splits to default to opening on the right using 'prefer-horizontal-split'.  I set a keybinding for 'clone-indirect-buffer-other-window' for when I want to have the same document in two splits.  The text of the indirect buffer is always identical to the text of its base buffer; changes made by editing either one are visible immediately in the other.  But in all other respects, the indirect buffer and its base buffer are completely separate.  For example, I can fold one split but other will be unfolded.

#+BEGIN_SRC emacs-lisp
(defun prefer-horizontal-split ()
  (set-variable 'split-height-threshold nil t)
  (set-variable 'split-width-threshold 40 t)) ; make this as low as needed
(add-hook 'markdown-mode-hook 'prefer-horizontal-split)
(map! :leader
      :desc "Clone indirect buffer other window" "b c" #'clone-indirect-buffer-other-window)
#+END_SRC


* RUST
#+BEGIN_SRC emacs-lisp
(setq lsp-lens-enable t)
(setq lsp-lens-place-position 'above-line)

(after! rustic
  (setq rustic-lsp-server 'rust-analyzer)
  (setq rustic-format-on-save t)
  (setq lsp-rust-analyzer-cargo-watch-command "clippy")
  (setq lsp-rust-analyzer-cargo-load-out-dirs-from-check t)
  (setq lsp-rust-analyzer-proc-macro-enable t)
  (setq lsp-rust-analyzer-display-chaining-hints t)
  (setq lsp-rust-analyzer-display-parameter-hints t)
  (setq lsp-rust-analyzer-server-display-inlay-hints t)
  (setq lsp-rust-all-features t)
  (setq lsp-rust-full-docs t))

;; Disable file watchers
(setq lsp-enable-file-watchers nil)
;; Disable sideline
(setq lsp-ui-sideline-enable nil)
#+END_SRC
